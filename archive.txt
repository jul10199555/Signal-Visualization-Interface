class SingleChannelPage(ctk.CTkFrame):
    def __init__(self, master, go_back, serial_interface: SerialInterface):
        super().__init__(master)
        self.grid(row=0, column=0, sticky="nsew")

        self.serial_interface = serial_interface
        self.running = False # If true, do not spawn a new thread to read values. If false, clear to spawn thread
        self.paused = True
        self.sampling_rate = 1

        # Reusing your existing implementation under here
        self.grid_rowconfigure(1, weight=1)
        self.grid_columnconfigure(0, weight=1)

        # Top control frame
        control_frame = ctk.CTkFrame(self)
        control_frame.grid(row=1, column=0, sticky="ew", padx=20, pady=(0, 10))
        control_frame.grid_columnconfigure(0, weight=1)
        control_frame.grid_columnconfigure(1, weight=1)

        # Device config frame
        device_config_frame = ctk.CTkFrame(control_frame)
        device_config_frame.grid(row=0, column=0, padx=10, pady=10, sticky="nsew")
        device_config_frame.grid_columnconfigure((0, 1), weight=1)

        ctk.CTkLabel(device_config_frame, text="Device Angle:").grid(row=0, column=0, padx=5, pady=5, sticky="ew")
        self.angle_entry = ctk.CTkEntry(device_config_frame, placeholder_text="°")
        self.angle_entry.grid(row=0, column=1, padx=5, pady=5, sticky="ew")

        ctk.CTkLabel(device_config_frame, text="Device Cycles:").grid(row=1, column=0, padx=5, pady=5, sticky="ew")
        self.cycles_entry = ctk.CTkEntry(device_config_frame, placeholder_text="#")
        self.cycles_entry.grid(row=1, column=1, padx=5, pady=5, sticky="ew")

        ctk.CTkLabel(device_config_frame, text="Device Speed:").grid(row=2, column=0, padx=5, pady=5, sticky="ew")
        self.speed_entry = ctk.CTkEntry(device_config_frame, placeholder_text="RPM")
        self.speed_entry.grid(row=2, column=1, padx=5, pady=5, sticky="ew")

        self.enter_btn = ctk.CTkButton(device_config_frame, text="Configure Device", command=self.submit_values)
        self.enter_btn.grid(row=3, column=0, columnspan=2, padx=5, pady=10)

        # Graph config frame
        graph_config_frame = ctk.CTkFrame(control_frame)
        graph_config_frame.grid(row=0, column=1, padx=10, pady=10, sticky="nsew")
        graph_config_frame.grid_columnconfigure((0, 1), weight=1)

        ctk.CTkLabel(graph_config_frame, text="X Limit:").grid(row=0, column=0, padx=5, pady=5, sticky="ew")
        self.xlim_entry = ctk.CTkEntry(graph_config_frame, placeholder_text="(a,b)")
        self.xlim_entry.grid(row=0, column=1, padx=5, pady=5, sticky="ew")

        ctk.CTkLabel(graph_config_frame, text="Y Limit:").grid(row=1, column=0, padx=5, pady=5, sticky="ew")
        self.ylim_entry = ctk.CTkEntry(graph_config_frame, placeholder_text="(a,b)")
        self.ylim_entry.grid(row=1, column=1, padx=5, pady=5, sticky="ew")

        ctk.CTkLabel(graph_config_frame, text="Data Rate:").grid(row=2, column=0, padx=5, pady=5, sticky="ew")
        self.resolution_entry = ctk.CTkEntry(graph_config_frame, placeholder_text="Hz")
        self.resolution_entry.grid(row=2, column=1, padx=5, pady=5, sticky="ew")

        self.resolution_btn = ctk.CTkButton(graph_config_frame, text="Configure Graph", command=self.submit_graph_data)
        self.resolution_btn.grid(row=3, column=0, columnspan=2, padx=5, pady=10)

        # Monitor frame
        monitor_frame = ctk.CTkFrame(self)
        monitor_frame.grid(row=2, column=0, sticky="nsew", padx=20, pady=(10, 20))
        monitor_frame.grid_rowconfigure(1, weight=1)
        monitor_frame.grid_columnconfigure(0, weight=1)

        ctk.CTkLabel(monitor_frame, text="Live Serial Data", font=ctk.CTkFont(size=16)).grid(row=0, column=0, pady=(10, 5))

        self.fig, self.ax = plt.subplots()
        (self.line,) = self.ax.plot([], [], "b-", lw=2)

        self.ax.set_xlim(0, 100)
        self.ax.set_ylim(0, 100)
        self.ax.set_xlabel("Time Elapsed (s)")
        self.ax.set_ylabel("Resistance (Ω)")
        self.ax.set_title("Resistance vs Time")


        self.canvas = FigureCanvasTkAgg(self.fig, master=monitor_frame)
        self.canvas_widget = self.canvas.get_tk_widget()
        self.canvas_widget.grid(row=1, column=0, pady=10)
        self.x_vals, self.y_vals = [], []

        button_row_frame = ctk.CTkFrame(monitor_frame, fg_color="transparent")
        button_row_frame.grid(row=2, column=0, pady=10)

        self.start_btn = ctk.CTkButton(button_row_frame, text="Start/Resume", command=self.start_serial)
        self.start_btn.grid(row=0, column=0, padx=10)

        self.stop_btn = ctk.CTkButton(button_row_frame, text="Pause", command=self.pause)
        self.stop_btn.grid(row=0, column=1, padx=10)

        self.restart_btn = ctk.CTkButton(button_row_frame, text="Stop", command=self.stop)
        self.restart_btn.grid(row=0, column=2, padx=10)

        self.download_btn = ctk.CTkButton(button_row_frame, text="Download Data", command=self.download_data)
        self.download_btn.grid(row=0, column=3, padx=5, pady=5, sticky="ew")

        self.ani = animation.FuncAnimation(self.fig, self.update_plot, interval=1000, cache_frame_data=False)